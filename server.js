// Generated by CoffeeScript 1.6.3
(function() {
  var MailParser, ad, createServer, db, getSlug, host, mongo, port, readFileSync, request, server, _ref;

  _ref = require('http'), createServer = _ref.createServer, request = _ref.request;

  readFileSync = require('fs').readFileSync;

  MailParser = require('mailparser').MailParser;

  getSlug = require('speakingurl');

  ad = readFileSync('./ad.html');

  mongo = require('mongoskin');

  db = mongo.db("mongodb://admin:BrBHnkJVAs3G@" + process.env.OPENSHIFT_MONGODB_DB_HOST + ":" + process.env.OPENSHIFT_MONGODB_DB_PORT + "/bbb?auto_reconnect");

  db.bind('mails', {
    getList: function(skip, limit, cb) {
      var fields;
      fields = ['title'];
      return this.find({}, {
        fields: fields,
        skip: skip,
        limit: limit
      }).toArray(cb);
    },
    save: function(mail, cb) {
      var html, title;
      html = mail.text;
      if (mail.html != null) {
        html = mail.html;
      }
      title = mail.subject;
      return this.insert({
        title: title,
        html: html
      }, cb);
    },
    getDoc: function(id, cb) {
      return this.findById(id, cb);
    }
  });

  server = createServer(function(req, res) {
    var id, listPage, mailparser, pmore, pname;
    pname = '/simple-smtp/-/mail-parser/@';
    pmore = '/page/';
    listPage = function(page) {
      var skip;
      if (page == null) {
        page = 0;
      }
      res.write('<div id="ddee-be-content-body"><h1>Update time:</h1>');
      res.write((new Date()).toUTCString());
      res.write('<div class="list">');
      skip = parseInt(page) * 100;
      return db.mails.getList(skip, 100, function(err, items) {
        items.forEach(function(_arg) {
          var title, _id;
          _id = _arg._id, title = _arg.title;
          return res.write('<p><a href="/' + _id + '/' + getSlug(title) + '">' + title + '</a></p>');
        });
        if (items.length === 100) {
          page = (skip + 100) / 100;
          res.write('<p><a href="/page/' + page + '">More...</a></p>');
        }
        return res.end('</div></div>');
      });
    };
    res.writeHead(200, {
      'Content-Type': 'text/html'
    });
    res.write(ad);
    if (req.url === '/') {
      return listPage();
    } else if (req.url.slice(0, pname.length) === pname) {
      mailparser = new MailParser({
        streamAttachments: true,
        showAttachmentLinks: true
      });
      mailparser.on('end', function(mail) {
        return db.mails.save(mail, function() {
          return res.end();
        });
      });
      return req.pipe(mailparser);
    } else if (req.url.slice(0, pmore.length) === pmore) {
      return listPage(req.url.slice(pmore.length));
    } else {
      id = req.url.split('/')[1];
      return db.mails.getDoc(id, function(err, _arg) {
        var html, title;
        title = _arg.title, html = _arg.html;
        if (err != null) {
          res.write('<h5>404 Not Found</h5>');
        } else {
          res.write('<title>' + title + '</title>' + '<div id="ddee-be-content-body">' + html + '</div>');
        }
        return res.end();
      });
    }
  });

  host = process.env.OPENSHIFT_NODEJS_IP || '127.0.0.1';

  port = process.env.OPENSHIFT_NODEJS_PORT || 8080;

  server.listen(port, host);

}).call(this);
