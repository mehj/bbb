// Generated by CoffeeScript 1.6.3
(function() {
  var MailParser, ad, appendFile, createServer, db, dirty, existsSync, getSlug, host, mkdirSync, port, readFile, readFileSync, request, server, store, writeFile, _ref, _ref1;

  _ref = require('http'), createServer = _ref.createServer, request = _ref.request;

  _ref1 = require('fs'), existsSync = _ref1.existsSync, mkdirSync = _ref1.mkdirSync, appendFile = _ref1.appendFile, readFileSync = _ref1.readFileSync, writeFile = _ref1.writeFile, readFile = _ref1.readFile;

  MailParser = require('mailparser').MailParser;

  getSlug = require('speakingurl');

  dirty = require('dirty');

  ad = readFileSync('./ad.html');

  db = dirty('../dirty.db');

  store = '../store/';

  if (!existsSync(store)) {
    mkdirSync(store);
  }

  server = createServer(function(req, res) {
    var id, listPage, mailparser, pmore, pname;
    pname = '/simple-smtp/-/mail-parser/@';
    pmore = '/more/';
    listPage = function(start) {
      var count;
      if (start == null) {
        start = 1;
      }
      res.write('<h1>Update time:</h1>');
      res.write((new Date()).toUTCString());
      count = 1;
      db.forEach(function(id, title) {
        if (count === start + 100) {
          return;
        }
        if (count >= start) {
          res.write('<p><a href="/' + id + '/' + getSlug(title) + '">' + title + '</a></p>');
        }
        return count++;
      });
      res.write('<p><a href="/more/' + count + '">More...</a></p>');
      return res.end(ad);
    };
    res.writeHead(200, {
      'Content-Type': 'text/html'
    });
    if (req.url === '/') {
      return listPage();
    } else if (req.url.slice(0, pname.length) === pname) {
      mailparser = new MailParser({
        streamAttachments: true,
        showAttachmentLinks: true
      });
      mailparser.on('end', function(mail) {
        var html, id, title;
        html = mail.text;
        if (mail.html != null) {
          html = mail.html;
        }
        title = mail.subject;
        id = '' + Date.now();
        return writeFile(store + id, html, function(err) {
          if (err) {
            return res.end();
          } else {
            return db.set(id, title, function() {
              return res.end();
            });
          }
        });
      });
      return req.pipe(mailparser);
    } else if (req.url.slice(0, pmore.length) === pmore) {
      return listPage(req.url.slice(pmore.length));
    } else {
      id = parseInt(req.url.split('/')[1]);
      readFile(store + id, function(err, html) {
        if (err != null) {
          return res.write('<h5>404 Not Found</h5>' + ad);
        } else {
          return res.write(html);
        }
      });
      return res.end();
    }
  });

  host = process.env.OPENSHIFT_NODEJS_IP || '127.0.0.1';

  port = process.env.OPENSHIFT_NODEJS_PORT || 8080;

  server.listen(port, host);

}).call(this);
