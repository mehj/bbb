// Generated by CoffeeScript 1.6.3
(function() {
  var MailParser, ad, createServer, db, existsSync, host, levelup, mkdirSync, port, publicFolder, readFile, readFileSync, request, server, writeFile, _ref, _ref1;

  _ref = require('http'), createServer = _ref.createServer, request = _ref.request;

  _ref1 = require('fs'), existsSync = _ref1.existsSync, mkdirSync = _ref1.mkdirSync, readFileSync = _ref1.readFileSync, writeFile = _ref1.writeFile, readFile = _ref1.readFile;

  MailParser = require('mailparser').MailParser;

  levelup = require('levelup');

  db = levelup('./db');

  publicFolder = './public';

  if (!existsSync(publicFolder)) {
    mkdirSync(publicFolder);
  }

  ad = readFileSync('./ad.html');

  server = createServer(function(req, res) {
    var key, lastKey, mailparser, pmore, pname;
    pname = '/simple-smtp/-/mail-parser/@';
    pmore = '/more/';
    res.writeHead(200, {
      'Content-Type': 'text/html'
    });
    if (req.url === '/') {
      lastKey = '';
      res.write('<h1>Update time:</h1>');
      res.write((new Date()).toUTCString());
      return db.createReadStream({
        limit: 100
      }).on('data', function(_arg) {
        var d, key, value;
        key = _arg.key, value = _arg.value;
        lastKey = key;
        d = (new Date(pareInt(key))).toUTCString();
        return res.write('<p><a href="/' + key + '">' + value + '[ ' + d + ' ]</a></p>');
      }).on('error', function(err) {
        return console.log('Oh my!', err);
      }).on('close', function() {
        return console.log('Stream closed');
      }).on('end', function() {
        res.write('<p><a href="/from/' + key + '">More...</a></p>');
        return res.end(ad);
      });
    } else if (req.url.slice(0, pname.length) === pname) {
      mailparser = new MailParser({
        streamAttachments: true,
        showAttachmentLinks: true
      });
      mailparser.on('end', function(mail) {
        var html, id;
        html = mail.text;
        if (mail.html != null) {
          html = mail.html;
        }
        html += '<title>' + mail.subject + '</title>' + html;
        id = Date.now().toString();
        return writeFile(publicFolder + id, html, function(err) {
          if (err == null) {
            return db.put(id, html);
          }
        });
      });
      req.pipe(mailparser);
      return req.accept();
    } else if ((key = req.url.slice(0, pmore.length) === pmore)) {
      lastKey = '';
      res.write(home);
      return db.createReadStream({
        start: key,
        limit: 100
      }).on('data', function(_arg) {
        var d, key, value;
        key = _arg.key, value = _arg.value;
        lastKey = key;
        d = (new Date(pareInt(key))).toUTCString();
        return res.write('<p><a href="/' + key + '">' + value + '[ ' + d + ' ]</a></p>');
      }).on('error', function(err) {
        return console.log('Oh my!', err);
      }).on('close', function() {
        return console.log('Stream closed');
      }).on('end', function() {
        return res.end('<p><a href="/from/' + key + '">More...</a></p>');
      });
    } else {
      return readFile(publicFolder + req.url, function(err, data) {
        if (err != null) {
          return res.end('<h5>404: Not Found</h5>' + ad);
        } else {
          res.write(data);
          return res.end(ad);
        }
      });
    }
  });

  host = process.env.OPENSHIFT_NODEJS_IP || '127.0.0.1';

  port = process.env.OPENSHIFT_NODEJS_PORT || 8080;

  server.listen(port, host);

}).call(this);
